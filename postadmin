#!/bin/bash

# Copyright (C) 2010 StÃ©phane Robert Richard.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the project nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE PROJECT AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE PROJECT OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.


###
## Functions

  ###
  ## Helpers

    log_debug() {
      if $debug; then
        echo "$@" >> $script_dir/tmp/debug.log
      fi
    }

    log_verbose() {
      if $verbose; then
        echo "$@"
      fi
    }

    show_help() {
      echo "
USAGE 
    $script_name [action] [command] [options] args...
WHERE
    action is one  of: $actions
    command is one of: $commands

For more specific help, type:
    $script_name [action] [command] --help
"
    }

    show_usage() {
      echo USAGE
      while read line; do
        echo -n '   '
        echo "$line"
      done < <(echo "$@")
      exit 1
    }

    require_var() {
      local var="$1"
      if [ -z "${!var}" ]; then
        log_debug "$var is not declared: "
        echo "$2"
        exit 1
      fi
    }

    validate_regex() {
      if ! [[ "$1" =~ $2 ]]; then 
        echo "$3 '$1' do not match against the regular expression $2"
        exit 1
      fi
    }

    ask_help() {
      [[ "$1" == '--help' ]]
      return "$?"
    } 

    substitute_tokens() {
      local string="$1"; shift
      local vars="$@"
      for var in $vars; do
        local token=%$var%
        local value=${!var}
        string=${string//$token/$value}
      done
      echo "$string"
    }

    domain_name() {
      echo "$1" | awk -F@ '{print $NF}'
    }

    # Sql queries
    db_query() {
      if [ -z "$@" ]; then
        echo query is empty
        exit 1
      fi
      query=$(substitute_tokens "$@" "$config_vars")
      local cmd=$(substitute_tokens "$sql_cmd" "$config_vars query")
      eval $cmd
    }
  
    domain_id() {
      db_query "${domain_id_query//%domain%/$1};"
    }

    user_id() {
      db_query "${user_id_query//%email%/$1};"
    }

    alias_id() {
      source_email="$1"
      destination_email="$2"
      local alias_query=$(substitute_tokens "$alias_id_query" source_email destination_email)
      echo $(db_query "$alias_query")
    }

  ##
  ###
  
  
  
  ###
  ## Commands

    domain() {

      add() {
        if ask_help $@; then
          show_usage "$script_name add domain [name]
                      Add a new domain"
        fi
        domain_id=$(domain_id "$domain")
        if [ ! -z "$domain_id" ]; then
          echo domain "$domain" already exist in database
          exit 1
        fi
        db_query "${add_domain_query//%domain%/$domain}"
      }

      show() {
        if ask_help $@; then
          show_usage "$script_name show domain [name]
                      Show a domain entry
                      If \`*\` is passed as argument \`name\`, list all domains in database"
        fi
        local result
        if [ "$domain"='*' ]; then
          result=$(db_query "$list_domains_query")
          echo "$result"
        else
          result=$(db_query "${show_domain_query//%domain%/$domain}")
          echo "$result"
        fi
      }

      list() {
        if ask_help $@; then
          show_usage "$script_name list domain [name]
                      List emails for this domain"
        fi
        local domain_id=$(domain_id "$domain")
        local result=$(db_query "${list_emails_query//%domain_id%/$domain_id}")
        echo "$result"
      }

      delete() {
        if ask_help $@; then
          show_usage "$script_name delete domain [name]"
        fi
        domain_id=$(domain_id "$domain")
        if [ -z "$domain_id" ]; then
          echo domain "$domain" do not exist in database
          exit 1
        fi
        db_query "${delete_domain_query//%domain_id%/$domain_id}"
      }
 
      # validate args
      validate_regex "$1" "$domain_regex" 'domain'
      domain="$1"; shift

      # Main
      case "$action" in
        add|show|list|delete)
          "$action" "$@"
        ;;
        *)
          echo Unexpected action "$action"
          show_help
          exit 1
        ;;
      esac
    }

    email() {

      add() {
        if ask_help $@; then
          show_usage "$script_name add email [user@domain] [password]
                      Add email user@domain"
        fi

        if [ -z "$1" ];then
          echo "No password provided"
          show_usage "$script_name add email [user@domain] [password]
                      Add email user@domain"
          exit 1
        fi

        validate_regex "$1" "$passwd_regex" 'password'
        password="$1"

        local email_query=$(substitute_tokens "$add_email_query" email domain_id password)
        db_query "$email_query"
      }

      show() {
        if ask_help $@; then
          show_usage "$script_name show email [user@domain]
                      Show email user@domain"
        fi
        local result=$(db_query "${show_email_query//%email%/$email}")
        if [ -z "$result" ]; then
          echo email "$email" does not exist in database
        fi
        echo "$result"
      }

      delete() {
        if ask_help $@; then
          show_usage "$script_name delete email [user@domain]
                      Delete email user@domain"
        fi
        user_id=$(user_id "$email")
        if [ -z "$user_id" ]; then
          echo email "$email" do not exist in database
          exit 1
        fi
        local email_query=$(substitute_tokens "$delete_user_query" email user_id)
        db_query "$email_query"
      }

      update() {
        echo "Unimplemented"
        show_help
      }

      suspend() {
        echo "Unimplemented"
        show_help
      }
      
      # validate args
      validate_regex "$1" "$email_regex" 'email'
      email="$1"; shift

      # retrieve domain id
      domain=$(domain_name "$email")
      domain_id=$(domain_id "$domain")

      if [ -z "$domain_id" ]; then
        echo domain "$domain" do not exist in database
        exit 1
      fi
 
      # Main
      case "$action" in
        add|show|delete)
          "$action" "$@"
        ;;
        *)
          echo Unexpected action "$action"
          show_help
          exit 1
        ;;
      esac
    }

    alias() {

      add() {
        if ask_help $@; then
          show_usage "$script_name add alias [source_email] [destination_email]
                      Add an alias from [source_email] to [destination_email]"
        fi

        alias_id=$(alias_id "$source_email" "$destination_email")

        if [ ! -z "$alias_id" ]; then
          echo "alias '$source_email' -> '$destination_email' already exist in database"
          exit 1
        fi

        local query=$(substitute_tokens "$add_alias_query" source_email destination_email domain_id)
        db_query "$query"
      }

      show() {
        echo "show"
      }

      delete() {
        if ask_help $@; then
          show_usage "$script_name delete alias [source_email] [destination_email]
                      Delete alias from [source_email] to [destination_email]"
        fi

        alias_id=$(alias_id "$source_email" "$destination_email")

        if [ -z "$alias_id" ]; then
          echo "alias '$source_email' -> '$destination_email' does not exist in database"
          exit 1
        fi

        db_query "${delete_alias_query//%alias_id%/$alias_id}"
      }

      update() {
        echo "Unimplemented"
        show_help
      }

      suspend() {
        echo "Unimplemented"
        show_help
      }

      # validate args
      validate_regex "$1" "$email_regex" 'source email'
      source_email="$1"; shift

      validate_regex "$1" "$email_regex" 'destination email'
      destination_email="$1"; shift
      
      # retrieve domain id
      domain=$(domain_name "$source_email")
      domain_id=$(domain_id "$domain")

      if [ -z "$domain_id" ]; then
        echo domain "$domain" do not exist in database
        exit 1
      fi

      # Main
      case "$action" in
        add|show|delete)
          "$action" "$@"
        ;;
        *)
          echo Unexpected action "$action"
          show_help
          exit 1
        ;;
      esac
    }
    
  ##
  ###

##
###


###
## Variables
 
  pushd $(dirname $(readlink -f "$BASH_SOURCE")) > /dev/null
  script_dir="$PWD"
  popd > /dev/null

  readonly script_name=$(basename $0)

  # Constants
  readonly actions="add|show|list|delete|update|suspend"
  readonly commands="domain|email|alias"

  # load config file
  config_dirs="
    .
    /etc
    /usr/local/etc
    /opt/etc"

  postadmin_conf=  

  for d in $config_dirs; do
    for localdir in $d $d/postadmin; do
      if [ -d "$localdir" ] && [ -f "$localdir/postadmin.conf" ]; then
        readonly postadmin_conf="$localdir/postadmin.conf"
        break
      fi
    done
  done

  require_var "postadmin_conf" "No config file can be found in $config_dirs"


  # Configuration variables
  
  ##CONFIG VARS -- Meta programming, do not delete
  vmail_home=/var/vmail


  sql_cmd='mysql -u"%sql_user%" -p"%sql_passwd%" -h"%sql_host%" -s --batch -e "USE %sql_database%; %query%"'
  sql_user=mailadmin
  sql_host=127.0.0.1
  sql_database=mailserver
  sql_passwd=mailadmin2011

  local_part_min_length=2
  local_part_max_length=23
  local_part_regex="^([0-9a-z\.-]{%local_part_min_length%,%local_part_max_length%})$"
  passwd_min_length=6
  passwd_regex=".{%passwd_min_length%,}"
  domain_regex='[a-z0-9.-]+\.[a-z]{2,4}'
  email_regex="[a-z0-9._%+-]+@%domain_regex%"

  user_name_min_length=1
  user_name_max_length=23
  password_min_length=6
  

  # Queries
  domain_table=virtual_domains
  domain_id_column=id
  domain_name_column=name
  user_table=virtual_users
  user_id_column=id
  user_email_column=email
  user_domain_id_column=domain_id
  user_password_column=password
  alias_table=virtual_aliases
  alias_id_column=id
  alias_domain_id_column=domain_id
  alias_source_column=source
  alias_destination_column=destination
  
  # domain
  domain_id_query="
      SELECT %domain_id_column% 
      FROM %domain_table% 
      WHERE %domain_name_column% = '%domain%'"
  add_domain_query="
      INSERT INTO %domain_table% (%domain_name_column%) 
      VALUES ('%domain%')"
  show_domain_query="
      SELECT name FROM %virtual_domains%"
  list_domains_query="
      SELECT %domain_name_column% 
      FROM %domain_table%"
  delete_domain_query="
      DELETE FROM %domain_table% 
      WHERE %domain_id_column% = %domain_id%"

  # email
  user_id_query="
      SELECT %user_id_column% 
      FROM %user_table% 
      WHERE %user_email_column% = '%email%'"
  show_email_query="
      SELECT %user_email_column%
      FROM %user_table%
      WHERE %user_email_column% = '%email%'"
  add_email_query="
      INSERT INTO %user_table% (%user_domain_id_column%,  %user_email_column%, %user_password_column%)
      VALUES ('%domain_id%', '%email%', MD5('%password%'));
      INSERT INTO %alias_table% (%alias_domain_id_column%, %alias_source_column%, %alias_destination_column%) 
      VALUES (%domain_id%, '%email%', '%email%')"
  list_emails_query="
      SELECT %user_table%.%user_email_column% 
      FROM %user_table% 
      WHERE %user_domain_id_column% = %domain_id%"
  delete_user_query="
      DELETE FROM %user_table%
      WHERE %user_id_column% = %user_id%;
      DELETE FROM %alias_table%
      WHERE %alias_source_column% = '%email%'"

  # alias
  alias_id_query="
      SELECT %alias_id_column% 
      FROM %alias_table% 
      WHERE %alias_source_column% = '%source_email%'
      AND %alias_destination_column% = '%destination_email%'"
  add_alias_query="
      INSERT INTO %alias_table% (%alias_domain_id_column%, %alias_source_column%, %alias_destination_column%) 
      VALUES (%domain_id%, '%source_email%', '%destination_email%')"
  delete_alias_query="
      DELETE FROM %alias_table% 
      WHERE %alias_id_column% = %alias_id%"

  ##END CONFIG VARS

  # sourcing configuration file
  . "$postadmin_conf"

  readonly config_vars=$(grep '##CONFIG VARS' -A 100 $script_dir/$script_name\
                         | grep '##END CONFIG VARS' -B 100\
                         | egrep '^\s*[a-z0-9_]+='\
                         | sed 's/^\s*\([a-z0-9_]\+\)=.*$/\1/')
  
  for var in $config_vars; do
    if [[ "$var" =~ _regex ]]; then
      declare -r $var=$(substitute_tokens "${!var}" "$config_vars")
    else
      readonly $var
    fi
  done


##
###



###
## Parsing arguments
  
  if [ $# -lt 2 ]; then
    echo "Wrong argument count"
    show_help
    exit 1
  fi
  
  # action
  if ! [[ "$1" =~ ^($actions)$ ]]; then
    echo "Unknow action $1"
    show_help
    exit 1
  fi
  readonly action="$1"
  shift

  # command
  if ! [[ "$1" =~ ^($commands)$ ]]; then
      echo "Unknow command $1"
      show_help
      exit 1
  fi
  readonly command="$1"
  shift

  debug=false
  verbose=false
  for arg in $@; do
    case "$arg" in
      '--debug') readonly debug=true;;
      '--verbose') readonly verbose=true;;
    esac
  done

##
###



###
## Main

  if $debug; then
    echo ========================
    echo DEBUGGING INFORMATIONS
    echo
    echo -- Configuration variables
    for var in $config_vars; do
      echo $var=${!var}
    done
    echo
    echo -- Arguments
    echo command=$command
    echo action=$action
    echo
    echo -- Additional parameters
    for arg in $@; do
      echo $arg
    done 
    echo ========================
  fi

  "$command" $@

##
###

exit 0
