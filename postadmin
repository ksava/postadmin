#!/bin/bash


###
## Functions

  ###
  ## Helpers

    log_debug() {
      if $debug; then
        echo "$@"
      fi
    }

    log_verbose() {
      if $verbose; then
        echo "$@"
      fi
    }

    show_help() {
      echo "
USAGE 
    $script_name [action] [command] [options] args...
WHERE
    action is one  of: $actions
    command is one of: $commands

For more specific help, type:
    $script_name [action] [command] --help
"
    }

    show_usage() {
      echo USAGE
      while read line; do
        echo -n '   '
        echo "$line"
      done < <(echo "$@")
      exit 1
    }

    require_var() {
      local var="$1"
      if [ -z "${!var}" ]; then
        echo -n "$var is not declared: "
        [ ! -z "$2" ] && echo "$2"
        exit 1
      fi
    }

    ask_help() {
      [[ "$1" == '--help' ]]
      return "$?"
    } 

    substitute_tokens() {
      local string="$1"; shift
      local vars="$@"
      for var in $vars; do
        local token=%$var%
        local value=${!var}
        string=${string//$token/$value}
      done
      echo "$string"
    }    

    # Mysql queries
    db_query() {
      query="$@"
      local cmd=$(substitute_tokens "$sql_cmd" "$config_vars query")
      echo query=$query
      echo cmd=$cmd
    }
  
    domain_id() {
      local token=%domain%
      db_query "${domain_id_query//$token/$1};"
    }

    user_id() {
      local token=%email%
      db_query "${user_id_query//$token/$1};"
    }

  ##
  ###
  
  
  
  ###
  ## Commands

    domain() {
      add() {
        if ask_help $1; then
          show_usage \
            "$script_name add domain [name] [options]
            options:
            -q    quota
            -n    number of accounts"
        fi
        user_id me@truc.fr
      }
      show() {
        if ask_help $1; then
          show_usage "$script_name show domain [name]"
        fi
        domain_id dummy.tld
        echo show
      }
      delete() {
        echo "delete"
      }
      update() {
        echo "Unimplemented"
        show_help
      }
      suspend() {
        echo "Unimplemented"
        show_help
      }
      "$1" "$2"
    }

    email() {
      add() {
        echo "add"
      }
      show() {
        echo "show"
      }
      delete() {
        echo "delete"
      }
      update() {
        echo "Unimplemented"
        show_help
      }
      suspend() {
        echo "Unimplemented"
        show_help
      }
      "$1"
    }

    alias() {
      add() {
        echo "add"
      }
      show() {
        echo "show"
      }
      delete() {
        echo "delete"
      }
      update() {
        echo "Unimplemented"
        show_help
      }
      suspend() {
        echo "Unimplemented"
        show_help
      }
      "$1"
    }
    
  ##
  ###

##
###


###
## Variables
 
  pushd $(dirname $(readlink -f "$BASH_SOURCE")) > /dev/null
  script_dir="$PWD"
  popd > /dev/null

  readonly script_name=$(basename $0)

  # Constants
  readonly POSTADM_CONF="${POSTADM_CONF:-/usr/local/etc/postadmin/postadmin.conf}"
  readonly actions="add|show|delete|update|suspend"
  readonly commands="domain|email|alias"


  # Configuration variables
  
  ##CONFIG VARS -- Meta programming, do not delete
  vmail_home=/var/vmail

  sql_cmd='mysql -u"%sql_user%" -p"%sql_passwd%" -h"%sql_host%" --batch -e "USE %sql_database%; %query%"'
  sql_user=mailadmin
  sql_host=127.0.0.1
  sql_database=mailserver
  sql_passwd="sure-this-is-not-a-password"

  local_part_min_length=2
  local_part_max_length=23
  local_part_regex="^([0-9a-z\.-]{%local_part_min_length%,%local_part_max_length%})$"
  passwd_min_length=6
  passwd_regex="^.{%passwd_min_length%,}$"
  domain_regex="^[a-z0-9\.\-]+$"
  email_regex="^[a-z@0-9\.\-]+$"

  user_name_min_length=1
  user_name_max_length=23
  password_min_length=6
  

  # Queries
  domain_id_query="SELECT id FROM virtual_domains WHERE name = '%domain%'"
  user_id_query="SELECT id FROM virtual_users WHERE email = '%email%'"

  ##END CONFIG VARS

  # sourcing configuration file
  . "$POSTADM_CONF"

  readonly config_vars=$(grep '##CONFIG VARS' -A 100 $script_dir/$script_name\
                         | grep '##END CONFIG VARS' -B 100\
                         | egrep '^\s*[a-z0-9_]+='\
                         | sed 's/^\s*\([a-z0-9_]\+\)=.*$/\1/')

  for var in $config_vars; do
    readonly $var
  done  

  # Required variables (must be defined in $POSTADMIN_CONF or given as environment variables
  require_var 'sql_passwd' "in $POSTADM_CONF"

##
###



###
## Parsing arguments

  # action
  if ! [[ "$1" =~ ^($actions)$ ]]; then
    echo "Unknow action $1"
    show_help
    exit 1
  fi
  readonly action="$1"
  shift

  # command
  if ! [[ "$1" =~ ^($commands)$ ]]; then
      echo "Unknow command $1"
      show_help
      exit 1
  fi
  readonly command="$1"
  shift

  debug=false
  verbose=false
  for arg in $@; do
    case "$arg" in
      '--debug') readonly debug=true;;
      '--verbose') readonly verbose=true;;
    esac
  done

##
###



###
## Main

  if $debug; then
    echo ========================
    echo DEBUGGING INFORMATIONS
    echo
    echo -- Configuration variables
    for var in $config_vars; do
      echo $var=${!var}
    done
    echo
    echo -- Arguments
    echo command=$command
    echo action=$action
    echo
    echo -- Additional parameters
    for arg in $@; do
      echo $arg
    done 
    echo ========================
  fi

  "$command" "$action" $@

##
###

exit 0
